// <auto-generated />
using System;
using Hayalpc.Dcb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MigrationTool.Migrations
{
    [DbContext(typeof(HpDbContext))]
    [Migration("20201124200837_Mig241124")]
    partial class Mig241124
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Carrier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("AuthorizedPerson")
                        .HasColumnName("authorized_person")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AuthorizedPersonEmail")
                        .HasColumnName("authorized_person_email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AuthorizedPersonPhone")
                        .HasColumnName("authorized_person_phone")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Logo")
                        .HasColumnName("logo")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Phone1")
                        .HasColumnName("phone1")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone2")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_carriers");

                    b.ToTable("carriers","txn");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Merchant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnName("account_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ActivityArea")
                        .IsRequired()
                        .HasColumnName("activity_area")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("AuthorizedPersonEmail")
                        .IsRequired()
                        .HasColumnName("authorized_person_email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AuthorizedPersonName")
                        .IsRequired()
                        .HasColumnName("authorized_person_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AuthorizedPersonPhone")
                        .IsRequired()
                        .HasColumnName("authorized_person_phone")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("AuthorizedPersonTckn")
                        .IsRequired()
                        .HasColumnName("authorized_person_tckn")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("BusinessDesc")
                        .IsRequired()
                        .HasColumnName("business_desc")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("CityId")
                        .HasColumnName("city_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CommercialRegistryNo")
                        .HasColumnName("commercial_registry_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("CommercialTitle")
                        .IsRequired()
                        .HasColumnName("commercial_title")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<long>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DistrictId")
                        .HasColumnName("district_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnName("iban")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnName("private_key")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("TaxNo")
                        .IsRequired()
                        .HasColumnName("tax_no")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnName("tax_office")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnName("web_site")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id")
                        .HasName("pk_merchants");

                    b.ToTable("merchants","merchant");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.ResetPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<Guid>("Token")
                        .HasColumnName("token")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_reset_passwords");

                    b.ToTable("reset_passwords","panel");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles","panel");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnName("controller")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnName("icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsMenu")
                        .HasColumnName("is_menu")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnName("order")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RolePermissionId")
                        .HasColumnName("role_permission_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.ToTable("role_permissions","panel");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CredentialUrl")
                        .HasColumnName("credential_url")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<bool>("IsRefundable")
                        .HasColumnName("is_refundable")
                        .HasColumnType("boolean");

                    b.Property<long?>("LimitProfileId")
                        .HasColumnName("limit_profile_id")
                        .HasColumnType("bigint");

                    b.Property<long>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NotificationUrl")
                        .HasColumnName("notification_url")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PlatformType")
                        .IsRequired()
                        .HasColumnName("platform_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnName("private_key")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("RefundableTime")
                        .HasColumnName("refundable_time")
                        .HasColumnType("integer");

                    b.Property<string>("SmsKeyword")
                        .HasColumnName("sms_keyword")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("SubType")
                        .HasColumnName("sub_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnName("web_site")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.ToTable("services","service");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Sms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CarrierId")
                        .HasColumnName("carrier_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnName("msisdn")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("OperatorSMSId")
                        .HasColumnName("operator_sms_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("SendDate")
                        .HasColumnName("send_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnName("short_code")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int?>("Trycount")
                        .HasColumnName("trycount")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_smses");

                    b.ToTable("smses","sms");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnName("cancel_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CancelReason")
                        .HasColumnName("cancel_reason")
                        .HasColumnType("text");

                    b.Property<long>("CarrierId")
                        .HasColumnName("carrier_id")
                        .HasColumnType("bigint");

                    b.Property<string>("CarrierSubId")
                        .HasColumnName("carrier_sub_id")
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnName("channel")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HireAmount")
                        .HasColumnName("hire_amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnName("item")
                        .HasColumnType("text");

                    b.Property<long>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantOrder")
                        .IsRequired()
                        .HasColumnName("merchant_order")
                        .HasColumnType("text");

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnName("msisdn")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<int>("RenewalCount")
                        .HasColumnName("renewal_count")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnName("renewal_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SubsDate")
                        .HasColumnName("subs_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SubsType")
                        .HasColumnName("subs_type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_subscriptions");

                    b.ToTable("subscriptions","sub");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.TableDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActionType")
                        .HasColumnName("action_type")
                        .HasColumnType("integer");

                    b.Property<string>("Assembly")
                        .IsRequired()
                        .HasColumnName("assembly")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("model_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Namespace")
                        .IsRequired()
                        .HasColumnName("namespace")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long?>("RoleId1")
                        .HasColumnName("role_id1")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId2")
                        .HasColumnName("role_id2")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_table_definitions");

                    b.ToTable("table_definitions","tracking");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.TableHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionDetail")
                        .IsRequired()
                        .HasColumnName("action_detail")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("ActionType")
                        .HasColumnName("action_type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataId")
                        .HasColumnName("data_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnName("model_name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("NewData")
                        .HasColumnName("new_data")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OldData")
                        .HasColumnName("old_data")
                        .HasColumnType("text");

                    b.Property<long?>("RoleId1")
                        .HasColumnName("role_id1")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId2")
                        .HasColumnName("role_id2")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<long>("TableDefinitionId")
                        .HasColumnName("table_definition_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_table_histories");

                    b.ToTable("table_histories","tracking");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<long>("CarrierId")
                        .HasColumnName("carrier_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnName("channel")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<DateTime?>("ChargeDate")
                        .HasColumnName("charge_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("ErrDesc")
                        .HasColumnName("err_desc")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Error")
                        .HasColumnName("error")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<long?>("ErrorId")
                        .HasColumnName("error_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnName("ıtem")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<long>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("MerchantOrder")
                        .IsRequired()
                        .HasColumnName("merchant_order")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Msisdn")
                        .IsRequired()
                        .HasColumnName("msisdn")
                        .HasColumnType("character varying(16)")
                        .HasMaxLength(16);

                    b.Property<string>("OperatorTransId")
                        .HasColumnName("operator_trans_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnName("refund_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefundReason")
                        .HasColumnName("refund_reason")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<long?>("SubId")
                        .HasColumnName("sub_id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TxId")
                        .HasColumnName("tx_ıd")
                        .HasColumnType("uuid")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserIp")
                        .IsRequired()
                        .HasColumnName("user_ip")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Value1")
                        .HasColumnName("value1")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value2")
                        .HasColumnName("value2")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value3")
                        .HasColumnName("value3")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.ToTable("transactions","txn");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("ImagePath")
                        .HasColumnName("image_path")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnName("last_login_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnName("last_password_change_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastSessionId")
                        .HasColumnName("last_session_id")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastWrongLoginTryDate")
                        .HasColumnName("last_wrong_login_try_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<int>("WrongLoginTryCount")
                        .HasColumnName("wrong_login_try_count")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users","panel");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.UserBulletin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnName("action_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnName("expire_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<long?>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasColumnType("character varying(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnName("read_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("RoleGroupId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_bulletins");

                    b.ToTable("user_bulletins","tracking");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.UserLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnName("action_type")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("MerchantId")
                        .HasColumnName("merchant_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.Property<string>("UserIp")
                        .HasColumnName("user_ip")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.HasKey("Id")
                        .HasName("pk_user_logs");

                    b.ToTable("user_logs","tracking");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CreateUserId")
                        .HasColumnName("create_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnName("update_user_id")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ıx_user_roles_role_id");

                    b.ToTable("user_roles","panel");
                });

            modelBuilder.Entity("Hayalpc.Dcb.Data.Models.UserRole", b =>
                {
                    b.HasOne("Hayalpc.Dcb.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
